/*globals define*/
/*jshint node:true, browser:true*/

/**
 * Generated by PluginGenerator 1.7.0 from webgme on Thu Oct 13 2016 09:54:38 GMT-0500 (Central Daylight Time).
 * A plugin that inherits from the PluginBase. To see source code documentation about available
 * properties and methods visit %host%/docs/source/PluginBase.html.
 */

define([
    'plugin/PluginConfig',
    'text!./metadata.json',
    'plugin/PluginBase'
], function (
    PluginConfig,
    pluginMetadata,
    PluginBase) {
    'use strict';

    pluginMetadata = JSON.parse(pluginMetadata);

    /**
     * Initializes a new instance of MiniProject2.
     * @class
     * @augments {PluginBase}
     * @classdesc This class represents the plugin MiniProject2.
     * @constructor
     */
    var MiniProject2 = function () {
        // Call base class' constructor.
        PluginBase.call(this);
        this.pluginMetadata = pluginMetadata;
    };

    /**
     * Metadata associated with the plugin. Contains id, name, version, description, icon, configStructue etc.
     * This is also available at the instance at this.pluginMetadata.
     * @type {object}
     */
    MiniProject2.metadata = pluginMetadata;

    // Prototypical inheritance from PluginBase.
    MiniProject2.prototype = Object.create(PluginBase.prototype);
    MiniProject2.prototype.constructor = MiniProject2;

    /**
     * Main function for the plugin to execute. This will perform the execution.
     * Notes:
     * - Always log with the provided logger.[error,warning,info,debug].
     * - Do NOT put any user interaction logic UI, etc. inside this method.
     * - callback always has to be called even if error happened.
     *
     * @param {function(string, plugin.PluginResult)} callback - the result callback
     */
    MiniProject2.prototype.main = function (callback) {
        // Use self to access core, project, result, logger etc from PluginBase.
        // These are all instantiated at this point.
        var self = this,
            nodeObject;


        // Using the logger.
        
        self.logger.debug('This is a debug message.');
        self.logger.info('This is an info message.');
        self.logger.warn('This is a warning message.');
        self.logger.error('This is an error message.');
        self.logger.error('This is the new line');

        // Using the coreAPI to make changes.

        nodeObject = self.activeNode;
	    var artifact;
        
		artifact = self.blobClient.createArtifact('Project-Data');
		 
         self.extractTreeData()
                 .then (function(TreeData){
					var TreeDataStr = JSON.stringify(TreeData,null,4);
				
                    self.TreeData = TreeData; 
                    self.logger.info('Extracted Tree Data', TreeDataStr);
                    return self.blobClient.putFile('tree.json',TreeDataStr);   					
                   // return artifact.addFile('tree.json',TreeDataStr);
                    					 
	                })		
                .then(function(jsonFileHash){
					self.result.addArtifact(jsonFileHash);
					return artifact.save();
					
				});					

			
         self.extractArrayData()
				.then(function(ArrayData){
				    var ArrayDataStr = JSON.stringify(ArrayData,null,4);
    			    self.ArrayData = ArrayData; 
				    //self.logger.info('Extract Array Data', ArrayDataStr);
				    return self.blobClient.putFile('meta.json',ArrayDataStr);
				  // return artifact.addFile('meta.json',ArrayDataStr);
	     	    }) 
				.then(function(jsonFileHash){
					self.result.addArtifact(jsonFileHash);
					return artifact.save();
					
				})	
				.then(function(){
                     
                    self.result.setSuccess(true);
                    callback(null, self.result);  
                 })
                 .catch(function(err){
                    callback(err,self.result);
                 });

    };
    
    MiniProject2.prototype.extractArrayData = function(){
		var self = this,
		    ArrayData = [];
				// extract array data
       return self.core.loadSubTree(self.activeNode)
               . then(function(nodes){
					var i;					
					// we have all the nodes or objects
					
					for (i = 0;i < nodes.length; i+=1) {
						self.pathToNode[self.core.getPath(nodes[i])] = nodes[i];
                        ArrayData.push(self.getNodeData(nodes[i]));						
						}	
                return ArrayData;
				
				});	
	}
	
    MiniProject2.prototype.extractTreeData = function() {
        var self = this;
		var TreeData = {
			name: '',     			   
			children:[] 				
			
			
		};
	
				
		    self.pathToNode = {};
			TreeData.name = self.core.getAttribute(self.activeNode,'name');
        
		// extract tree data
        return self.core.loadSubTree(self.activeNode)
                . then(function(nodes){
					var i,
					    childNode,
						childName,
						childrenPaths;
					
					// we have all the nodes or objects
					
					for (i = 0;i < nodes.length; i+=1) {
						self.pathToNode[self.core.getPath(nodes[i])] = nodes[i];
                   					
						}	
					
					childrenPaths = self.core.getChildrenPaths(self.activeNode);
					
					for (i = 0; i< childrenPaths.length; i+=1){
						childNode = self.pathToNode[childrenPaths[i]];
						childName = self.core.getAttribute(childNode,'name');
						TreeData.children.push(self.getChildrenData(childNode));
					}	
                return TreeData;
				
				});		
        };
		
    MiniProject2.prototype.getNodeData = function(Node){
		var self = this, 
		    i,
			NodeData = {
				name: '', 
				path: '',
				nbrOfChildren:'',
				base: ''
			},
			baseNode,
			childrenPaths; 

		childrenPaths = self.core.getChildrenPaths(Node);
			
		NodeData.name = self.core.getAttribute(Node,'name');
		NodeData.path = self.core.getPath(Node);
		NodeData.nbrOfChildren = childrenPaths.length; 
		
		if (self.core.getBase(Node)){
		baseNode = self.core.getBase(Node);
        NodeData.base = self.core.getAttribute(baseNode,'name');		
		} 
		
		
		return NodeData;
		
	}
		
	MiniProject2.prototype.getChildrenData = function(childNode){
		var self = this,
            i,
            childrenPaths2,	
            childNode2,
            childName2, 
			metaNode,
			
		    childrenData = {
				id: '',
				name: '',
				isMeta:'',
				MetaType:'',
				Connection: [],
                children: []				
			};
		
        // children ID		
		childrenData.id = self.core.getPath(childNode);
		// children Name
		childrenData.name = self.core.getAttribute(childNode,'name');
		// check whether a Meta type
		if(self.core.isMetaNode(childNode)){
			childrenData.isMeta = "true";
		}else if(!self.core.isMetaNode(childNode)){
			childrenData.isMeta = "false";
		}
		// get Meta type
		metaNode = self.getMetaType(childNode);
		childrenData.MetaType = self.core.getAttribute(metaNode,'name');
		// get connection data
        if (self.isMetaTypeOf(childNode, self.META['Connection'])) {
			childrenData.Connection.push(self.getConnectionData(childNode));
		}	
		
		// recursive call itself
        childrenPaths2 = self.core.getChildrenPaths(childNode);
        for (i = 0; i< childrenPaths2.length; i+=1){
						childNode2 = self.pathToNode[childrenPaths2[i]];				
						childrenData.children.push(self.getChildrenData(childNode2));
					}	  		
		
		return childrenData;
	};	
    
	MiniProject2.prototype.getConnectionData = function(childNode){
		var self = this,
		    targetID,
			targetNode,
			sourceID,
			sourceNode,
			
		    ConnectionData = {
				SourceName: '',
				DestinationName: '',
				Guard: ''
	        }
		if (self.isMetaTypeOf(childNode,  self.META['Connection'])) {
			// get guard of a connection
			ConnectionData.Guard = self.core.getAttribute(childNode,'guard');
		    // get source name of a connection
			sourceID = self.core.getPointerPath(childNode,'src');
			sourceNode = self.pathToNode[sourceID];	
			if(sourceNode){
				ConnectionData.SourceName =  self.core.getAttribute(sourceNode,'name');
			}
			// get destination name of a connection
			targetID = self.core.getPointerPath(childNode,'dst');
			targetNode = self.pathToNode[targetID];
			if(targetNode){
			    ConnectionData.DestinationName = self.core.getAttribute(targetNode,'name');	
			}
			
		}	
			
			return ConnectionData;
	};
	
    return MiniProject2;
});
